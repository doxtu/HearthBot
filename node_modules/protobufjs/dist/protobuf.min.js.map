{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/convert.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","getFieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","value","setCtor","_TypeError","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","convert","destination","options","converter","defaults","repeated","fieldsOnly","Enum","toJson","enums","resolvedType","getValuesById","longs","unsigned","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","Buffer","isBuffer","toMessage","getCtor","fromString","newBuffer","decoder","mtype","group","ref","safeProp","resolvedKeyType","types","basic","packed","genEncodeType","fieldIndex","encoder","wireType","mapKey","partOf","required","low","high","ucName","oneofFields","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","className","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","toLowerCase","optional","message","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","_clearProperties","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","getRoot","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucFirst","_fieldsArray","addFieldsToParent","OneOfPrototype","index","self","fieldName","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","substring","toUpperCase","parse","illegal","filename","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","parseInlineOptions","lcFirst","valueType","parseEnumField","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","package","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","initParser","load","finish","cb","process","parsed","sync","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","verifier","Writer","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","oneOfName","getFieldsById","setup","fld","fork","ldelim","bake","description","dst","allocUnsafe","LongBitsPrototype","zero","zzEncode","abs","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","isIE8","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","longNeq","longNe","val","target","descriptors","descriptor","ucKey","defineProperty","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","roots","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(34);\r\n\r\nvar Type; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type\", \"a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n            // see util.prop for IE8 support\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object} google/protobuf/wrappers.proto Wrappers\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});","\"use strict\";\r\nmodule.exports = convert;\r\n\r\nvar Enum    = require(16),\r\n    util    = require(34);\r\n\r\nvar Type,    // cyclic\r\n    Message;\r\n\r\n/**\r\n * A converter as used by {@link convert}.\r\n * @typedef Converter\r\n * @type {function}\r\n * @param {Field} field Reflected field\r\n * @param {*} value Value to convert\r\n * @param {Object.<string,*>} options Conversion options\r\n * @returns {*} Converted value\r\n */\r\n\r\n/**\r\n * Converts between JSON objects and messages, based on reflection information.\r\n * @param {Type} type Type\r\n * @param {*} source Source object\r\n * @param {*} destination Destination object\r\n * @param {Object.<string,*>} options Conversion options\r\n * @param {Converter} converter Conversion function\r\n * @returns {*} `destination`\r\n * @property {Converter} toJson To JSON converter using {@link JSONConversionOptions}\r\n * @property {Converter} toMessage To message converter using {@link MessageConversionOptions}\r\n */\r\nfunction convert(type, source, destination, options, converter) {\r\n\r\n    if (!Type) { // require this here already so it is available within the converters below\r\n        Type = require(32);\r\n        Message = require(19);\r\n    }\r\n\r\n    if (!options)\r\n        options = {};\r\n\r\n    var keys = Object.keys(options.defaults ? type.fields : source);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = type.fields[key = keys[i]],\r\n            value = source[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value || options.defaults) {\r\n                    destination[key] = [];\r\n                    if (value)\r\n                        for (var j = 0, l = value.length; j < l; ++j)\r\n                            destination[key].push(converter(field, value[j], options));\r\n                }\r\n            } else\r\n                destination[key] = converter(field, value, options);\r\n        } else if (!options.fieldsOnly)\r\n            destination[key] = value;\r\n    }\r\n    return destination;\r\n}\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON} with {@link convert}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n */\r\n/**/\r\nconvert.toJson = function toJson(field, value, options) {\r\n    if (!options)\r\n        options = {};\r\n\r\n    // Recurse into inner messages\r\n    if (value instanceof Message)\r\n        return convert(value.$type, value, {}, options, toJson);\r\n\r\n    // Enums as strings\r\n    if (options.enums && field.resolvedType instanceof Enum)\r\n        return options.enums === String\r\n            ? field.resolvedType.getValuesById()[value]\r\n            : value | 0;\r\n\r\n    // Longs as numbers or strings\r\n    if (options.longs && field.long) {\r\n        var unsigned = field.type.charAt(0) === \"u\";\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if(typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // TODO: fromValue is missing an unsigned option (long.js 3.2.0)\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n    }\r\n\r\n    // Bytes as base64 strings, plain arrays or buffers\r\n    if (options.bytes && field.bytes) {\r\n        if (options.bytes === String)\r\n            return util.base64.encode(value, 0, value.length);\r\n        if (options.bytes === Array)\r\n            return Array.prototype.slice.call(value);\r\n        if (options.bytes === util.Buffer && !util.Buffer.isBuffer(value))\r\n            return util.Buffer.from(value); // polyfilled\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from} with {@link convert}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n/**/\r\nconvert.toMessage = function toMessage(field, value, options) {\r\n    switch (typeof value) {\r\n\r\n        // Recurse into inner messages\r\n        case \"object\":\r\n            if (value) {\r\n                if (field.resolvedType instanceof Type)\r\n                    return convert(field.resolvedType, value, new (field.resolvedType.getCtor())(), options, toMessage);\r\n                if (field.type === \"bytes\")\r\n                    return util.Buffer\r\n                        ? util.Buffer.isBuffer(value)\r\n                          ? value\r\n                          : util.Buffer.from(value) // polyfilled\r\n                        : value instanceof util.Array\r\n                          ? value\r\n                          : new util.Array(value);\r\n            }\r\n            break;\r\n\r\n        // Strings to proper numbers, longs or buffers\r\n        case \"string\":\r\n            if (field.resolvedType instanceof Enum)\r\n                return field.resolvedType.values[value] || 0;\r\n            if (field.long)\r\n                return util.Long.fromString(value, field.type.charAt(0) === \"u\");\r\n            if (field.bytes) {\r\n                var buf = util.newBuffer(util.base64.length(value));\r\n                util.base64.decode(value, buf, 0);\r\n                return buf;\r\n            }\r\n            break;\r\n\r\n        // Numbers to proper longs\r\n        case \"number\":\r\n            if (field.long)\r\n                return util.Long.fromNumber(value, field.type.charAt(0) === \"u\");\r\n            break;\r\n\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(16),\r\n    types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"%s&&%s.length||(%s=[])\", ref, ref, ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(16),\r\n    types    = require(33),\r\n    util     = require(34);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\"w.uint32(%d).%s(%s[ks[i]])\", 16 | wireType, type, ref);\r\n            gen\r\n            (\"w.ldelim()\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s)\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(%s!==undefined&&util.longNe(%s,%d,%d))\", ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m.get\" + oneof.ucName + \"()\");\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(34);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById|valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(16),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed|packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(32);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined)\r\n            this.defaultValue = this.options[\"default\"];\r\n        else\r\n            this.defaultValue = typeDefault;\r\n\r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar convert = require(13);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return convert(this.$type, this, {}, options, convert.toJson);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return convert(this.$type, object, new this.constructor(), options, convert.toMessage);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(32),\r\n    util = require(34);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(34);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object\", nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object\", \"an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object\", \"a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(30);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.getNestedArray();\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(34);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17),\r\n    util  = require(34);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = util.ucFirst(this.name);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(31),\r\n    Root      = require(27),\r\n    Type      = require(32),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(30),\r\n    Method    = require(20),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        root = new Root();\r\n        options = root || {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (lower(type) === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n\r\n                /* istanbul ignore next */\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(36);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(26);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return new BufferReader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(25);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(34);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(24);\r\n        common = require(12);\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(34);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(34),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(30),\r\n    Class     = require(11),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(38),\r\n    convert   = require(13),\r\n    util      = require(34);\r\n\r\nvar encoder,  // might become cyclic\r\n    decoder,  // might become cyclic\r\n    verifier; // cyclic\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return convert(this, object, new (this.getCtor())(), options, convert.toMessage);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    if (!encoder) {\r\n        encoder  = require(15);\r\n        decoder  = require(14);\r\n        verifier = require(37);\r\n    }\r\n    this.encode = encoder(this).eof(this.getFullName() + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(this.getFullName() + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(this.getFullName() + \"$verify\", {\r\n        types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(34);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(36);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the second character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) { // ucFirst counterpart is in runtime util\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Whether running within IE8 or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isIE8 = false; try { util.isIE8 = eval(\"!-[1,]\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated Use {@link util.longNe|longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = util.LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = util.LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) { // lcFirst counterpart is in core util\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ucKey = util.ucFirst(key);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = util.isIE8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (util.isIE8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(16),\r\n    Type      = require(32),\r\n    util      = require(34);\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else if (field.resolvedType instanceof Type) gen\r\n            (\"var r;\")\r\n            (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return r\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType instanceof Type) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(36);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(39);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(38);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(36);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}
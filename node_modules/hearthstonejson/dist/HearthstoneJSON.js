"use strict";
var https = require("https");
var URL = require("url");
var LocalStorageBackend_1 = require("./LocalStorageBackend");
var CacheProxy_1 = require("./CacheProxy");
var HearthstoneJSON = (function () {
    function HearthstoneJSON(sourceUrl, backend) {
        this.defaultLocale = "enUS";
        this.cached = null;
        this.fetched = null;
        this.fallback = null;
        this.prefix = "hsjson-";
        this.redirected = 0;
        this.sourceUrl = sourceUrl ? sourceUrl : function (build, locale) { return "https://api.hearthstonejson.com/v1/" + build + "/" + locale + "/cards.json"; };
        this.backend = backend ? backend : new CacheProxy_1.default(new LocalStorageBackend_1.default());
    }
    HearthstoneJSON.prototype.get = function (build, locale, cb) {
        var _this = this;
        if (typeof locale === "function" && typeof cb === "undefined") {
            cb = locale;
            locale = this.defaultLocale;
        }
        if (!build || isNaN(+build)) {
            build = "latest";
        }
        this.cached = false;
        if (build !== "latest") {
            this.fetched = false;
            this.fallback = false;
            var key = this.generateKey(build, locale);
            if (this.backend.has(key)) {
                this.cached = true;
                cb(this.backend.get(key));
                return;
            }
        }
        this.redirected = 0;
        this.fetch(build, locale, function (data, receivedBuild, receivedLocale) {
            if (!receivedBuild) {
                receivedBuild = build;
            }
            if (!receivedLocale) {
                receivedLocale = locale;
            }
            _this.fetched = true;
            if (!_this.fallback) {
                _this.fallback = false;
            }
            cb(data, receivedBuild, receivedLocale);
            if (receivedBuild !== "latest") {
                _this.backend.set(_this.generateKey(receivedBuild, receivedLocale), data);
            }
        }, function () {
            if (build === "latest") {
                if (locale === _this.defaultLocale) {
                    // completely failed
                    return;
                }
                else {
                    locale = _this.defaultLocale;
                }
            }
            // fallback to latest
            _this.fallback = true;
            _this.get("latest", locale, cb);
        });
    };
    HearthstoneJSON.prototype.getLatest = function (locale, cb) {
        this.get("latest", locale, cb);
    };
    HearthstoneJSON.prototype.generateKey = function (build, locale) {
        if (build === "latest") {
            throw new Error('Refusing to generate key for "latest" metadata');
        }
        return this.prefix + build + "_" + locale;
    };
    HearthstoneJSON.prototype.fetch = function (build, locale, cb, errorCb, url) {
        var _this = this;
        if (typeof url === "undefined") {
            url = this.sourceUrl(build, locale);
        }
        var options = URL.parse(url);
        options.withCredentials = false;
        options.method = "GET";
        var request = https.request(options);
        request.once("response", function (message) {
            if (message.statusCode != 200) {
                if (message.statusCode >= 301 && message.statusCode <= 302 && _this.redirected < 5) {
                    // redirects
                    var target = message.headers.location;
                    _this.redirected++;
                    _this.fetch(build, locale, cb, errorCb, target);
                    return;
                }
                if (message.statusCode >= 400 && message.statusCode <= 499) {
                    // bad requests
                    if (build !== "latest") {
                        // build fallback
                        _this.fetch("latest", locale, cb, errorCb);
                        return;
                    }
                    if (locale !== _this.defaultLocale) {
                        // locale fallback
                        _this.fetch(build, _this.defaultLocale, cb, errorCb);
                        return;
                    }
                    return;
                }
                return;
            }
            var data = "";
            message.on("data", function (chunk) {
                data += chunk;
            });
            message.on("error", function () {
                errorCb();
            });
            message.on("end", function () {
                try {
                    var cards = JSON.parse(data);
                    cb(cards, build, locale);
                }
                catch (e) {
                    errorCb();
                }
            });
        });
        request.on("error", function (e) {
            errorCb();
        });
        request.end();
    };
    HearthstoneJSON.prototype.has = function (build, locale) {
        if (build === "latest") {
            return false;
        }
        return this.backend.has(this.generateKey(build, locale));
    };
    return HearthstoneJSON;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = HearthstoneJSON;
//# sourceMappingURL=HearthstoneJSON.js.map